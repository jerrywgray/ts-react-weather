import { ChunkExtractor } from "@loadable/server";
import * as express from "express";
import { createReadStream } from "fs";
import * as path from "path";
import * as React from "react";
import { renderToString } from "react-dom/server";
import { StaticRouter, StaticRouterContext } from "react-router";

import App from "./app";

import config from "./config";

// This is the stats file generated by webpack loadable plugin
const statsFile = path.resolve("./dist/loadable-stats.json");

// We create an extractor from the statsFile
const extractor = new ChunkExtractor({ statsFile });

console.log("Server booting...");

const isProd = process.env.NODE_ENV === "production";
const server: express.Application = express();
const PORT = process.env.PORT || 8081;

console.log(`Prod: ${isProd} Port: ${PORT}`);

server.use("/", express.static("dist"));

server.get("*.js", (req, res, next) => {
  req.url = req.url + ".gz";
  res.setHeader("Content-Type", config.contentTypes(req.url));
  res.set("Content-Encoding", "gzip");
  next();
});

server.get("*", (req: express.Request, res: express.Response) => {
  const { httpVersion, method } = req;
  let { url } = req;
  if (!url || url === "index.html") {
    url = "/";
  }
  console.log(`${httpVersion} ${method} ${url}`);

  try {

    const staticContext: any = {};

    // Wrap your application using "collectChunks"
    const jsx = extractor.collectChunks(<StaticRouter context={staticContext} location={url}>
      <App />
    </StaticRouter>);

    // Render your application
    const html = renderToString(jsx);

    // You can now collect your script tags
    const scriptTags = extractor.getScriptTags(); // or extractor.getScriptElements();

    // You can also collect your "preload/prefetch" links
    const preloadTags = extractor.getLinkTags(); // or extractor.getLinkElements();

    // And you can even collect your style tags (if you use "mini-css-extract-plugin")
    const styleTags = extractor.getStyleTags(); // or extractor.getStyleElements();

    const fouredOut = staticContext.statusCode === 404;

    res.setHeader("Content-Type", config.contentTypes(url));
    res.setHeader("Cache-Control", config.cacheControl(isProd, fouredOut ? 0 : 5));

    res.status(staticContext.statusCode || 200).send(`
        <!doctype html>
        <html>
        <head>
          <meta charset="utf-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          ${styleTags}
          ${preloadTags}
          <script crossorigin src="${config.reactURL(isProd)}"></script>
          <script crossorigin src="${config.reactDomURL(isProd)}"></script>
        </head>
        <body>
          <div id="${config.rootContainer}">${html}</div>
          ${scriptTags}
        </body>
        </html>
      `);
  } catch (e) {
    console.error(e);
    url = "500.html";
    res.setHeader("Content-Type", config.contentTypes(url));
    res.setHeader("Cache-Control", config.cacheControl(isProd, 0));
    res.statusCode = 500;
    res.end("500 Internal Error");
  }
});

server.listen(PORT, () => { console.log("Server Up"); });
